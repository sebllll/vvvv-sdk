<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)\..\..\tools\VersionInfo.exe" TaskName="VVVV.Tools.MSBuild.GetVersionInfo" />

  <!-- VVVV_VersionInfo -->
  <Target Name="VVVV_VersionInfo">
    <GetVersionInfo File="$(VVVVExe)">
      <Output TaskParameter="ReturnValue" PropertyName="VVVV_VersionInfo" />
    </GetVersionInfo>
  </Target>

  <!-- Generates all the filenames used by the Build, Deploy and Zip tasks -->
  <Target Name="VVVV_GenerateFileNames" DependsOnTargets="VVVV_VersionInfo">
    <PropertyGroup>
      <CoreDir>$(RootDir)lib\core\</CoreDir>
      <PluginsDir>$(RootDir)lib\nodes\plugins\</PluginsDir>
      <EditorsDir>$(RootDir)lib\nodes\editors\</EditorsDir>
      <DeployName>$(DeployPrefix)_$(VVVV_VersionInfo)_$(Platform)</DeployName>
      <DeployDir Condition="'$(DeployDir)' == ''">$(DeployBaseDir)$(DeployName)\</DeployDir>
      <DeployedVVVVExe>$(DeployDir)vvvv.exe</DeployedVVVVExe>
      <ZipFileName>$(DeployBaseDir)$(DeployName).zip</ZipFileName>
    </PropertyGroup>
    <CreateItem Include="$(CoreDir)**\*.*">
      <Output TaskParameter="Include" ItemName="CoreFiles" />
    </CreateItem>
  </Target>

  <!-- Build -->
  <Target Name="VVVV_Build" DependsOnTargets="VVVV_GenerateFileNames">
    <!-- Copy shared dependencies to lib/core -->
    <CreateItem Include="$(PluginsDir)Sanford*">
      <Output TaskParameter="Include" ItemName="_SharedDependencies_" />
    </CreateItem>
    <Copy SourceFiles="@(_SharedDependencies_)" DestinationFolder="$(CoreDir)" />
    <!-- Delete all files which are already in lib/core -->
    <Delete Files="@(CoreFiles->'$(PluginsDir)%(RecursiveDir)%(Filename)%(Extension)')" />
    <Delete Files="@(CoreFiles->'$(EditorsDir)%(RecursiveDir)%(Filename)%(Extension)')" />
    <!-- Create lib/*.dtd file -->
    <ItemGroup>
      <DTDFiles Include="$(RootDir)lib\*.dtd" />
    </ItemGroup>
    <Delete Files="@(DTDFiles)" />
    <Copy SourceFiles="$(MSBuildThisFileDirectory)vvvv45.dtd" DestinationFiles="$(RootDir)lib\$(VVVV_VersionInfo).dtd" />
  </Target>
  
  <!-- Deploy -->
  <Target Name="VVVV_Deploy" DependsOnTargets="VVVV_GenerateFileNames;VVVV_Build">
    <RemoveDir Directories="$(DeployDir)" />
    <Message Text="Deploying to $(DeployDir)" Importance="High" />
    <CreateItem Include="$(DeployInclude)" Exclude="$(DeployExclude)">
      <Output ItemName="FilesToDeploy" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(FilesToDeploy)"
          DestinationFiles="@(FilesToDeploy->'$(DeployDir)%(RecursiveDir)%(Filename)%(Extension)')" 
          SkipUnchangedFiles="true" 
          OverwriteReadOnlyFiles="true" 
          ContinueOnError="true" />
    <Exec Condition="'$(DeployReadOnlyFiles)' != ''"
          Command="attrib +R &quot;$(DeployDir)$(DeployReadOnlyFiles)&quot; /S /D" />
    <Exec Condition="'$(DeployHiddenFiles)' != ''"
          Command="attrib +H &quot;$(DeployDir)$(DeployHiddenFiles)&quot;" />
    <!-- /dx9ex flag fixes crash on build server, see: http://msdn.microsoft.com/en-us/library/windows/desktop/ff471598%28v=vs.85%29.aspx -->
    <!-- Call /nodelist without any arguments to include native nodes -->
    <Exec Condition="Exists('$(DeployedVVVVExe)')"
          Command="&quot;$(DeployedVVVVExe)&quot; /allowmultiple /nodelist" />
    <!-- Call /nodelist with arguments to filter for specific directory -->
    <Exec Condition="!Exists('$(DeployedVVVVExe)')" 
          Command="&quot;$(VVVVExe)&quot; /allowmultiple /nodelist &quot;$(DeployDir)lib\nodes&quot;" />
  </Target>
  
  <!-- Zip -->
  <Target Name="Zip" DependsOnTargets="VVVV_GenerateFileNames">
    <Message Text="Generating $(ZipFileName)" Importance="High" />
    <Delete Files="$(ZipFileName)" />
    <!-- Because of http://msbuildtasks.tigris.org/issues/show_bug.cgi?id=148 we switched to cmd line call to 7-Zip. -->
    <Exec Command="&quot;$(SevenZip)&quot; a -r &quot;$(ZipFileName)&quot; &quot;$(DeployDir)&quot;" />
    <!--
    <CreateItem Include="$(ZipTempDir)\**\*.*">
      <Output ItemName="ZipFiles" TaskParameter="Include" />
    </CreateItem>
    <Zip Files="@(ZipFiles)" 
         WorkingDirectory="$(TempBaseDir)" 
         ZipFileName="$(ZipFileName)" 
         ZipLevel="9" />
    -->
  </Target>

  <!-- ARToolKitPlus -->
  <Target Name="_CheckMinGW_">
    <Error Text="The MinGW property must be set on the command line."
           Condition="'$(MinGW)' == ''" />
    <PropertyGroup>
      <GCC>$(MinGW)bin\gcc.exe</GCC>
      <AR>$(MinGW)bin\ar.exe</AR>
    </PropertyGroup>
  </Target>
  <Target Name="_CompileARToolKitPlus_"
          Inputs="@(ARToolKitPlusSourceFiles)"
          Outputs="@(ARToolKitPlusObjectFiles)"
          DependsOnTargets="_CheckMinGW_">
    <Exec Command="$(GCC) $(ARToolKitPlusCompilerOptions) $(ARToolKitPlusCompilerIncludes) -c %(ARToolKitPlusSourceFiles.FullPath) -o %(ARToolKitPlusObjectFiles.FullPath)" />
  </Target>
  <Target Name="_LinkARToolKitPlus_"
          Inputs="@(ARToolKitPlusObjectFiles)"
          Outputs="$(ARToolKitPlusLibFile)"
          DependsOnTargets="_CompileARToolKitPlus_">
    <MakeDir Directories="$(ARToolKitPlusOutputPath)" />
    <Exec Command="$(AR) -r -s $(ARToolKitPlusLibFile) @(ARToolKitPlusObjectFiles, ' ')" />
  </Target>
  <Target Name="BuildARToolKitPlus"
          DependsOnTargets="_LinkARToolKitPlus_;_CompileARToolKitPlus_" />
  
  <!-- Freeframe -->
  <Target Name="_CheckCodeBlocks_">
    <Error Text="The CodeBlocks property must be set on the command line."
           Condition="'$(CodeBlocks)' == ''" />
  </Target>
  
  <Target Name="_CheckOpenCV_">
    <Error Text="The OpenCV property must be set on the command line."
           Condition="'$(OpenCV)' == ''" />
  </Target>
  
  <Target Name="_CheckGit_">
    <Error Text="The Git property must be set on the command line."
           Condition="'$(Git)' == ''" />
  </Target>
  
  <Target Name="_CheckFreeframeDependencies_"
          DependsOnTargets="_CheckCodeBlocks_;_CheckOpenCV_" />
          
  <Target Name="BuildFreeframe"
          Inputs="@(FreeframeProjects)"
          Outputs="@(FreeframeProjects->'%(OutputDir)%(Filename).dll')"
          DependsOnTargets="_CheckFreeframeDependencies_">
    <Exec Command="&quot;$(CodeBlocks)&quot; --no-splash-screen --rebuild --target=Release &quot;%(FreeframeProjects.FullPath)&quot;" 
          EnvironmentVariables="OpenCV=$(OpenCV)\" />
    <Copy SourceFiles="@(FreeframeProjects->'%(RootDir)%(Directory)%(Filename).dll')" DestinationFiles="@(FreeframeProjects->'%(OutputDir)%(Filename).dll')"/>
  </Target>
  
  <Target Name="CleanFreeframe"
          DependsOnTargets="_CheckGit_">
    <Exec Command="$(Git) clean -f -d -x -- %(FreeframeProjects.RelativeDir)" />
  </Target>
  
  <!-- DirectShowFilter -->
  <Target Name="_CheckBDS_">
    <Error Text="The BDS property must be set on the command line."
           Condition="'$(BDS)' == ''" />
  </Target>
  <Target Name="_CheckDSPACK_">
    <Error Text="The DSPACK property must be set on the command line."
           Condition="'$(DSPACK)' == ''" />
  </Target>

  <Target Name="BuildDirectShowFilter"
          Inputs="@(DirectShowFilterProjects)"
          Outputs="@(DirectShowFilterProjects->'%(OutputDir)%(Filename).ax')"
          DependsOnTargets="_CheckBDS_;_CheckDSPACK_">
    <Exec Command="$(MSBuildBinPath)\MSBuild.exe &quot;%(DirectShowFilterProjects.FullPath)&quot; /p:Configuration=Release"
          EnvironmentVariables="BDS=$(BDS);DSPACK=$(DSPACK)" />
    <Copy SourceFiles="@(DirectShowFilterProjects->'%(RootDir)%(Directory)%(Filename).ax')" DestinationFiles="@(DirectShowFilterProjects->'%(OutputDir)%(Filename).ax')"/>
  </Target>
  <Target Name="CleanDirectShowFilter"
          DependsOnTargets="_CheckGit_">
    <Exec Command="$(Git) clean -f -d -x -- %(DirectShowFilterProjects.RelativeDir)" />
  </Target>
</Project>

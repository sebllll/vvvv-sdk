<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)\..\..\tools\VersionInfo.exe" TaskName="VVVV.Tools.MSBuild.GetVersionInfo" />
  
  <!-- Build -->
  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)" />
  <Target Name="CoreBuild">
    <!-- Copy shared dependencies to lib/core -->
    <CreateItem Include="$(PluginsOutputDir)Sanford*">
      <Output TaskParameter="Include" ItemName="_SharedDependencies_" />
    </CreateItem>
    <Copy SourceFiles="@(_SharedDependencies_)" DestinationFolder="$(CoreOutputDir)" />
    <!-- Delete all files which are already in lib/core -->
    <CreateItem Include="$(CoreOutputDir)**\*.*">
      <Output TaskParameter="Include" ItemName="CoreOutputFiles" />
    </CreateItem>
    <Delete Files="@(CoreOutputFiles->'$(PluginsOutputDir)%(RecursiveDir)%(Filename)%(Extension)')" />
    <Delete Files="@(CoreOutputFiles->'$(EditorsOutputDir)%(RecursiveDir)%(Filename)%(Extension)')" />
    <!-- Create lib/*.dtd file -->
    <GetVersionInfo File="$(MSBuildThisFileDirectory)..\vvvv.exe">
      <Output TaskParameter="ReturnValue" PropertyName="VersionInfo" />
    </GetVersionInfo>
    <ItemGroup>
      <DTDFiles Include="$(MSBuildThisFileDirectory)..\lib\*.dtd" />
    </ItemGroup>
    <Delete Files="@(DTDFiles)" />
    <Copy SourceFiles="$(MSBuildThisFileDirectory)vvvv45.dtd" DestinationFiles="$(MSBuildThisFileDirectory)..\lib\$(VersionInfo).dtd" />
  </Target>
  <Target Name="Rebuild" DependsOnTargets="$(RebuildDependsOn)" />
  <Target Name="Clean" DependsOnTargets="$(CleanDependsOn)" />
  
  <!-- Zip -->
  <Target Name="Zip">
    <CallTarget Targets="$(ZipSteps)" RunEachTargetSeparately="True" />
  </Target>
  <Target Name="_PreZip_">
    <RemoveDir Directories="$(TempBaseDir)" />
  </Target>
  <Target Name="_Zip_">
    <MakeDir Directories="$(ZipOutputDir)" />
    <GetVersionInfo File="$(StartProgram)">
      <Output TaskParameter="ReturnValue" PropertyName="VersionInfo" />
    </GetVersionInfo>
    <PropertyGroup>
      <ZipTempDir Condition="'$(ZipTempDir)' == ''">$(TempBaseDir)$(ZipFileNamePrefix)_$(VersionInfo)_$(Platform)\</ZipTempDir>
      <ZipFileName>$(ZipOutputDir)$(ZipFileNamePrefix)_$(VersionInfo)_$(Platform).zip</ZipFileName>
    </PropertyGroup>
    <CreateItem Include="$(ZipInclude)" Exclude="$(ZipExclude)">
      <Output ItemName="OutputFiles" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(OutputFiles)" DestinationFiles="@(OutputFiles->'$(ZipTempDir)%(RecursiveDir)%(Filename)%(Extension)')" />
    <Exec Condition="'$(ZipReadOnlyFiles)' != ''"
          Command="attrib +R &quot;$(ZipTempDir)$(ZipReadOnlyFiles)&quot; /S /D" />
    <Exec Condition="'$(ZipHiddenFiles)' != ''"
          Command="attrib +H &quot;$(ZipTempDir)$(ZipHiddenFiles)&quot;" />
    <!-- /dx9ex flag fixes crash on build server, see: http://msdn.microsoft.com/en-us/library/windows/desktop/ff471598%28v=vs.85%29.aspx -->
    <Exec Command="&quot;$(VVVVExe)&quot; /allowmultiple /dx9ex /nodelist &quot;$(ZipTempDir)lib\nodes&quot;" />
    <!-- Because of http://msbuildtasks.tigris.org/issues/show_bug.cgi?id=148 we switched to cmd line call to 7-Zip. -->
    <Exec Command="&quot;$(SevenZip)&quot; a -r &quot;$(ZipFileName)&quot; &quot;$(ZipTempDir)&quot;" />
    <!--
    <CreateItem Include="$(ZipTempDir)\**\*.*">
      <Output ItemName="ZipFiles" TaskParameter="Include" />
    </CreateItem>
    <Zip Files="@(ZipFiles)" 
         WorkingDirectory="$(TempBaseDir)" 
         ZipFileName="$(ZipFileName)" 
         ZipLevel="9" />
    -->
  </Target>
  <Target Name="_PostZip_">
    <RemoveDir Directories="$(TempBaseDir)" />
  </Target>

  <!-- ARToolKitPlus -->
  <Target Name="_CheckMinGW_">
    <Error Text="The MinGW property must be set on the command line."
           Condition="'$(MinGW)' == ''" />
    <PropertyGroup>
      <GCC>$(MinGW)bin\gcc.exe</GCC>
      <AR>$(MinGW)bin\ar.exe</AR>
    </PropertyGroup>
  </Target>
  <Target Name="_CompileARToolKitPlus_"
          Inputs="@(ARToolKitPlusSourceFiles)"
          Outputs="@(ARToolKitPlusObjectFiles)"
          DependsOnTargets="_CheckMinGW_">
    <Exec Command="$(GCC) $(ARToolKitPlusCompilerOptions) $(ARToolKitPlusCompilerIncludes) -c %(ARToolKitPlusSourceFiles.FullPath) -o %(ARToolKitPlusObjectFiles.FullPath)" />
  </Target>
  <Target Name="_LinkARToolKitPlus_"
          Inputs="@(ARToolKitPlusObjectFiles)"
          Outputs="$(ARToolKitPlusLibFile)"
          DependsOnTargets="_CompileARToolKitPlus_">
    <MakeDir Directories="$(ARToolKitPlusOutputPath)" />
    <Exec Command="$(AR) -r -s $(ARToolKitPlusLibFile) @(ARToolKitPlusObjectFiles, ' ')" />
  </Target>
  <Target Name="BuildARToolKitPlus"
          DependsOnTargets="_LinkARToolKitPlus_;_CompileARToolKitPlus_" />
  
  <!-- Freeframe -->
  <Target Name="_CheckCodeBlocks_">
    <Error Text="The CodeBlocks property must be set on the command line."
           Condition="'$(CodeBlocks)' == ''" />
  </Target>
  
  <Target Name="_CheckOpenCV_">
    <Error Text="The OpenCV property must be set on the command line."
           Condition="'$(OpenCV)' == ''" />
  </Target>
  
  <Target Name="_CheckGit_">
    <Error Text="The Git property must be set on the command line."
           Condition="'$(Git)' == ''" />
  </Target>
  
  <Target Name="_CheckFreeframeDependencies_"
          DependsOnTargets="_CheckCodeBlocks_;_CheckOpenCV_" />
          
  <Target Name="BuildFreeframe"
          Inputs="@(FreeframeProjects)"
          Outputs="@(FreeframeProjects->'%(OutputDir)%(Filename).dll')"
          DependsOnTargets="_CheckFreeframeDependencies_">
    <Exec Command="&quot;$(CodeBlocks)&quot; --no-splash-screen --rebuild --target=Release &quot;%(FreeframeProjects.FullPath)&quot;" 
          EnvironmentVariables="OpenCV=$(OpenCV)\" />
    <Copy SourceFiles="@(FreeframeProjects->'%(RootDir)%(Directory)%(Filename).dll')" DestinationFiles="@(FreeframeProjects->'%(OutputDir)%(Filename).dll')"/>
  </Target>
  
  <Target Name="CleanFreeframe"
          DependsOnTargets="_CheckGit_">
    <Exec Command="$(Git) clean -f -d -x -- %(FreeframeProjects.RelativeDir)" />
  </Target>
  
  <!-- DirectShowFilter -->
  <Target Name="_CheckBDS_">
    <Error Text="The BDS property must be set on the command line."
           Condition="'$(BDS)' == ''" />
  </Target>
  <Target Name="_CheckDSPACK_">
    <Error Text="The DSPACK property must be set on the command line."
           Condition="'$(DSPACK)' == ''" />
  </Target>

  <Target Name="BuildDirectShowFilter"
          Inputs="@(DirectShowFilterProjects)"
          Outputs="@(DirectShowFilterProjects->'%(OutputDir)%(Filename).ax')"
          DependsOnTargets="_CheckBDS_;_CheckDSPACK_">
    <Exec Command="$(MSBuildBinPath)\MSBuild.exe &quot;%(DirectShowFilterProjects.FullPath)&quot; /p:Configuration=Release"
          EnvironmentVariables="BDS=$(BDS);DSPACK=$(DSPACK)" />
    <Copy SourceFiles="@(DirectShowFilterProjects->'%(RootDir)%(Directory)%(Filename).ax')" DestinationFiles="@(DirectShowFilterProjects->'%(OutputDir)%(Filename).ax')"/>
  </Target>
  <Target Name="CleanDirectShowFilter"
          DependsOnTargets="_CheckGit_">
    <Exec Command="$(Git) clean -f -d -x -- %(DirectShowFilterProjects.RelativeDir)" />
  </Target>
</Project>
